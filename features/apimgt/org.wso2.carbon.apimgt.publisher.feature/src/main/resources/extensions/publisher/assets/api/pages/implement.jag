<%
/*
 *  Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
var caramel;
require('/modules/publisher.js').exec(function(ctx) {
    caramel = require('caramel');
    var ui = require('rxt').ui;
    var asset = require('rxt').asset;
    var uriMatcher = new URIMatcher(ctx.request.getRequestURI());
    var options = uriMatcher.match('/{context}/asts/{type}/{pageName}/{+id}');
    var type = options.type;
    var am = asset.createUserAssetManager(ctx.session, type);
    var page = ui.buildPage(ctx.session, ctx.request);
    var output;

    if (!options.id) {
        ctx.response.sendError(400, 'Cannot render the implementation details without an asset id');
        return;
    }
    am = asset.createUserAssetManager(ctx.session, options.type);
    try {
        asset = am.get(options.id);
    }
    catch(e){
        log.error(e);
        ctx.response.sendError(404,'Asset was not found');
        return;
    }
    var apiPublisher =  require('apipublisher').provider;
    var apiProxy = apiPublisher.instance(ctx.username);
    var api = apiProxy.getAPI(asset.attributes.overview_provider, asset.attributes.overview_name, asset.attributes.overview_version).api;

    var output = am.render(asset, page)._custom();
    api.id = options.id;
    output.api = api;
    output.id = api.id;
	output.api.isPermitted = apiProxy.hasPublishPermission().permitted;

	//TODO hard coded values replace
	output.api.isCreatePermitted = true;
	output.api.isDataPublishingEnabled = false;
	output.api.storeUrl = 'test';
	//TODO correctly fix this
	output.api.inline_impl = "'";
	output.api.hide_endpoint="hide";
	output.api.endpoint_impl = "checked='checked'";
	output.api.hide_impl = "hide";

	//Set language specific helper messages and names
	var locale = require('/extensions/assets/api/locale/locale_en.json');
	output.locale = locale;
    //TODO 
    /*
    following is to avoid The choice of Java method java.lang.String.replace matching JavaScript
    argument types (function,function) is ambiguous
    Error while loading implement API page after initial page save.
    */
    output.api.endpointConfig = new String(api.endpointConfig);
    caramel.render(output);
}, request, response, session);
%>
