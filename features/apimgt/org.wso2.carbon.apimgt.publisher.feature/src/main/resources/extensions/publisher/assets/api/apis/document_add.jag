<%
/*
 *  Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
var caramel;
require('/modules/publisher.js').exec(function(ctx) {
    var log = new Log('copy_api');
    var ref = require('utils').request;
    var responseProcessor = require('utils').response;
    var res = ctx.response;
    var request = ctx.request;
    var server = require('store').server;
    var user = server.current(ctx.session);
    var username = user.username;
    var session = ctx.session;
    var uriMatcher = new URIMatcher(request.getRequestURI());
    log.info('=========================================  '+request.getRequestURI());
    var POST_NEW_API_URL = '/{context}/asts/api/apis/addDoc';
    log.info('=========================================  '+POST_NEW_API_URL);

    var method = request.getMethod();
    log.info('-----------------------------------------------  '+method);
    var options = ref.getQueryOptions(request.getQueryString());
    var response = ctx.response;
    response.contentType = 'application/json';
    var constants = require("rxt").constants;
        switch (method) {
            case 'POST':// POST endpoints
                options.type = request.getParameter('type');
                if (uriMatcher.match(POST_NEW_API_URL)) {//return assets by type
                    var apiPublisher =  require('apipublisher').provider;
                    var apiProxy = apiPublisher.instance(username);
                    var apiData = {};
                    apiData.name = request.getParameter('name', 'UTF-8');
                    apiData.version = request.getParameter('version');
                    var provider = request.getParameter('provider');
                    if (request.getParameter('provider') == null) {
                        apiData.provider = username;
                    } else {
                        apiData.provider = request.getParameter('provider')
                    }

                    var doc = {};
                    doc.docType = request.getParameter('docType');
                    doc.sourceType = request.getParameter('sourceType');
                    doc.docType = request.getParameter('docType');
                    doc.sourceURL = request.getParameter('sourceURL');
                    doc.summary = request.getParameter('summary');
                    doc.docName = request.getParameter('docName');
                    doc.otherTypeName = request.getParameter('otherTypeName');
                    doc.visibility = request.getParameter('visibility');

                    if(doc.sourceType != null && doc.sourceType == 'File'){
                        doc.content = request.getParameter('content');
                        doc.fileName = request.getParameter('fileName');
                        doc.contentType = request.getParameter('contentType');
                        doc.filePath = request.getParameter('filePath');
                    }
                    
                    
                    
                    var data = apiProxy.addDocumentation(apiData,doc);
                    response = responseProcessor.buildSuccessResponse(response, constants.STATUS_CODES.OK, data);
                }  else {
                    response = responseProcessor.buildErrorResponse(    response,
                                                                    constants.STATUS_CODES.NOT_IMPLEMENTED, 'Unable to locate this POST endpoint');
                }
                break;

            default://other un-implemented endpoints
                response = responseProcessor.buildErrorResponse(response, constants.STATUS_CODES.NOT_IMPLEMENTED,
                                                                'The endpoint that you have requested is not implemented for the ' + method +
                                                                ' method.Try making the request with the appropriate verb' +
                                                                '(hint: create/update operations use POST).');
        }
    
}, request, response, session); %>
